// Code generated by MockGen. DO NOT EDIT.
// Source: payment.go
//
// Generated by this command:
//
//	mockgen -source=payment.go -destination=mocks/payment.go
//

// Package mock_payment is a generated GoMock package.
package mock_payment

import (
	reflect "reflect"

	dto "github.com/IgorRamosBR/g73-techchallenge-payment/internal/core/usecases/dto"
	payment "github.com/IgorRamosBR/g73-techchallenge-payment/internal/infra/drivers/payment"
	gomock "go.uber.org/mock/gomock"
)

// MockPaymentBroker is a mock of PaymentBroker interface.
type MockPaymentBroker struct {
	ctrl     *gomock.Controller
	recorder *MockPaymentBrokerMockRecorder
}

// MockPaymentBrokerMockRecorder is the mock recorder for MockPaymentBroker.
type MockPaymentBrokerMockRecorder struct {
	mock *MockPaymentBroker
}

// NewMockPaymentBroker creates a new mock instance.
func NewMockPaymentBroker(ctrl *gomock.Controller) *MockPaymentBroker {
	mock := &MockPaymentBroker{ctrl: ctrl}
	mock.recorder = &MockPaymentBrokerMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockPaymentBroker) EXPECT() *MockPaymentBrokerMockRecorder {
	return m.recorder
}

// GeneratePaymentQRCode mocks base method.
func (m *MockPaymentBroker) GeneratePaymentQRCode(paymentOrder dto.PaymentOrderDTO) (payment.PaymentQRCodeResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GeneratePaymentQRCode", paymentOrder)
	ret0, _ := ret[0].(payment.PaymentQRCodeResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GeneratePaymentQRCode indicates an expected call of GeneratePaymentQRCode.
func (mr *MockPaymentBrokerMockRecorder) GeneratePaymentQRCode(paymentOrder any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GeneratePaymentQRCode", reflect.TypeOf((*MockPaymentBroker)(nil).GeneratePaymentQRCode), paymentOrder)
}
