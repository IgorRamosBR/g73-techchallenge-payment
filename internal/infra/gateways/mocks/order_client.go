// Code generated by MockGen. DO NOT EDIT.
// Source: order_client.go
//
// Generated by this command:
//
//	mockgen -source=order_client.go -destination=mocks/order_client.go
//

// Package mock_gateways is a generated GoMock package.
package mock_gateways

import (
	reflect "reflect"

	entities "github.com/IgorRamosBR/g73-techchallenge-payment/internal/core/entities"
	gomock "go.uber.org/mock/gomock"
)

// MockOrderClient is a mock of OrderClient interface.
type MockOrderClient struct {
	ctrl     *gomock.Controller
	recorder *MockOrderClientMockRecorder
}

// MockOrderClientMockRecorder is the mock recorder for MockOrderClient.
type MockOrderClientMockRecorder struct {
	mock *MockOrderClient
}

// NewMockOrderClient creates a new mock instance.
func NewMockOrderClient(ctrl *gomock.Controller) *MockOrderClient {
	mock := &MockOrderClient{ctrl: ctrl}
	mock.recorder = &MockOrderClientMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockOrderClient) EXPECT() *MockOrderClientMockRecorder {
	return m.recorder
}

// NotifyPaymentOrder mocks base method.
func (m *MockOrderClient) NotifyPaymentOrder(orderId int, status entities.PaymentStatus) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "NotifyPaymentOrder", orderId, status)
	ret0, _ := ret[0].(error)
	return ret0
}

// NotifyPaymentOrder indicates an expected call of NotifyPaymentOrder.
func (mr *MockOrderClientMockRecorder) NotifyPaymentOrder(orderId, status any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "NotifyPaymentOrder", reflect.TypeOf((*MockOrderClient)(nil).NotifyPaymentOrder), orderId, status)
}
