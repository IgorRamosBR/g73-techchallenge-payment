// Code generated by MockGen. DO NOT EDIT.
// Source: payment_repository.go
//
// Generated by this command:
//
//	mockgen -source=payment_repository.go -destination=mocks/payment_repository.go
//

// Package mock_gateways is a generated GoMock package.
package mock_gateways

import (
	reflect "reflect"

	entities "github.com/IgorRamosBR/g73-techchallenge-payment/internal/core/entities"
	dto "github.com/IgorRamosBR/g73-techchallenge-payment/internal/core/usecases/dto"
	gomock "go.uber.org/mock/gomock"
)

// MockPaymentRepositoryGateway is a mock of PaymentRepositoryGateway interface.
type MockPaymentRepositoryGateway struct {
	ctrl     *gomock.Controller
	recorder *MockPaymentRepositoryGatewayMockRecorder
}

// MockPaymentRepositoryGatewayMockRecorder is the mock recorder for MockPaymentRepositoryGateway.
type MockPaymentRepositoryGatewayMockRecorder struct {
	mock *MockPaymentRepositoryGateway
}

// NewMockPaymentRepositoryGateway creates a new mock instance.
func NewMockPaymentRepositoryGateway(ctrl *gomock.Controller) *MockPaymentRepositoryGateway {
	mock := &MockPaymentRepositoryGateway{ctrl: ctrl}
	mock.recorder = &MockPaymentRepositoryGatewayMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockPaymentRepositoryGateway) EXPECT() *MockPaymentRepositoryGatewayMockRecorder {
	return m.recorder
}

// SavePaymentOrder mocks base method.
func (m *MockPaymentRepositoryGateway) SavePaymentOrder(paymentOrderDTO dto.PaymentOrderDTO, qrCode string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SavePaymentOrder", paymentOrderDTO, qrCode)
	ret0, _ := ret[0].(error)
	return ret0
}

// SavePaymentOrder indicates an expected call of SavePaymentOrder.
func (mr *MockPaymentRepositoryGatewayMockRecorder) SavePaymentOrder(paymentOrderDTO, qrCode any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SavePaymentOrder", reflect.TypeOf((*MockPaymentRepositoryGateway)(nil).SavePaymentOrder), paymentOrderDTO, qrCode)
}

// UpdatePaymentOrderStatus mocks base method.
func (m *MockPaymentRepositoryGateway) UpdatePaymentOrderStatus(orderId, paymentId int, status entities.PaymentStatus) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdatePaymentOrderStatus", orderId, paymentId, status)
	ret0, _ := ret[0].(error)
	return ret0
}

// UpdatePaymentOrderStatus indicates an expected call of UpdatePaymentOrderStatus.
func (mr *MockPaymentRepositoryGatewayMockRecorder) UpdatePaymentOrderStatus(orderId, paymentId, status any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdatePaymentOrderStatus", reflect.TypeOf((*MockPaymentRepositoryGateway)(nil).UpdatePaymentOrderStatus), orderId, paymentId, status)
}
